{"version":3,"sources":["reducers/work-rate.js","components/work-rate-list/work-rate-list.js","components/summary-tab/summary_tab.js","App.js","reportWebVitals.js","saga/requests/workrate.js","saga/handlers/workrate.js","saga/rootSaga.js","index.js"],"names":["initailState","workRates","summary","GET_WORKRATE","getWorkRates","type","workRateReducer","state","action","console","log","Object","assign","message","price","WorkRateList","dispatch","useDispatch","useEffect","useSelector","workRate","ListGroup","as","numbered","length","map","index","Item","className","work_name","rate","Badge","variant","pill","Button","onClick","setSumWorkRates","SummaryTab","App","Container","Row","Col","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","requestGetWorkRate","axios","request","method","url","handleGetWorkRate","call","res","data","put","watcherSaga","takeLatest","reducer","combineReducers","sagaMiddleware","createSagaMiddleware","middleware","store","createStore","applyMiddleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fc33afe4.chunk.js","sourcesContent":["const initailState = {\n  workRates: [],\n  summary: 0,\n};\n\nexport const SET_WORKRATE = 'SET_WORKRATES';\nexport const GET_WORKRATE = 'GET_WORKRATES';\nexport const SET_SUM_WORKRATE = 'SET_SUM_WORKRATE';\n\nexport const getWorkRates = () => ({\n  type: GET_WORKRATE,\n})\n\nexport const setWorkRates = (workRates) => ({\n  type: SET_WORKRATE,\n  workRates,\n});\n\nexport const setSumWorkRates = (price) => ({\n  type: SET_SUM_WORKRATE,\n  price,\n})\n\nconst workRateReducer = (state = initailState, action) => {\n  console.log('workRateReducer');\n  console.log(action);\n  switch (action.type) {\n    case 'SET_WORKRATES':\n      const { workRates } = action;\n      return Object.assign({}, state, {\n        workRates,\n      });\n    case 'UPDATE_MESSAGE':\n      return Object.assign({}, state, {\n        message: action.message,\n      });\n    case 'SET_SUM_WORKRATE':\n      return Object.assign({}, state, {\n        summary: state.summary + action.price,\n      });\n    default: return state;\n  }\n}\n\nexport default workRateReducer;","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ListGroup, Button, Badge } from 'react-bootstrap';\nimport { getWorkRates, setSumWorkRates } from '../../reducers/work-rate';\n\nexport default function WorkRateList () {\n  const dispatch = useDispatch(getWorkRates())\n\n  useEffect(() => {\n    dispatch(getWorkRates());\n  }, [dispatch]);\n\n  const workRates = useSelector((state) => state.workRate.workRates);\n  const summary = useSelector((state) => state.workRate.summary);\n  console.log('workRates', workRates);\n\n  const addSumRate = (price) => {\n    console.log('price' , price);\n    dispatch(setSumWorkRates(price));\n  }\n\n  const renderWorkRateList = () => {\n    console.log('workRates ', workRates);\n    if (workRates.length === 0) {\n      return (<div>No Data</div>)\n    }\n\n    return workRates.map((workRate, index) => {\n      return (<ListGroup.Item key={index} as=\"li\" className=\"d-flex justify-content-between align-items-start\">\n        <div className=\"ms-2 me-auto\">\n          <div className=\"fw-bold\">{workRate.work_name}</div>\n          {workRate.rate}\n          <Badge variant=\"primary\" pill>14</Badge>\n          <Button onClick={()=> addSumRate(workRate.rate)} variant=\"outline-primary\">ADD</Button>\n        </div>\n      </ListGroup.Item>);\n    })\n  }\n\n\n  return (\n    <ListGroup as=\"ol\" numbered>\n      {renderWorkRateList()}\n    </ListGroup>)\n}","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nexport default function SummaryTab () {\n  const summary = useSelector((state) => state.workRate.summary);\n  console.log('summary', summary);\n\n  return (<div as=\"ol\" numbered>Summary : {summary}</div>)\n}","import React  from 'react';\nimport WorkRateList from './components/work-rate-list/work-rate-list';\nimport SummaryTab from './components/summary-tab/summary_tab';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <SummaryTab />\n        <Container>\n          <Row>\n            <Col><WorkRateList key=\"work-rate\" /></Col>\n          </Row>\n        </Container>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from 'axios';\n\nexport function requestGetWorkRate() {\n  return axios.request({\n    method: 'GET',\n    url: 'https://my-json-server.typicode.com/habilit/income-payment/work-rates',\n  })\n}","import { call, put } from 'redux-saga/effects';\nimport { setWorkRates } from '../../reducers/work-rate';\nimport { requestGetWorkRate } from '../requests/workrate';\n\nexport function* handleGetWorkRate(action) {\n  try {\n    const res = yield call(requestGetWorkRate);\n    const { data } = res;\n    yield put(setWorkRates(data))\n  } catch (err) {\n    console.log(err);\n  }\n}","import { takeLatest } from 'redux-saga/effects';\nimport { handleGetWorkRate } from './handlers/workrate';\nimport { GET_WORKRATE } from '../reducers/work-rate';\n\nexport function* watcherSaga() {\n  //look for any actions\n  yield takeLatest(GET_WORKRATE, handleGetWorkRate)\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport workRateReducer from './reducers/work-rate';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { watcherSaga } from './saga/rootSaga';\n\nconst reducer = combineReducers({\n  workRate: workRateReducer,\n});\nconst sagaMiddleware = createSagaMiddleware();\nconst middleware = [sagaMiddleware];\n\nconst store = createStore(reducer, {}, applyMiddleware(...middleware));\nsagaMiddleware.run(watcherSaga);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}